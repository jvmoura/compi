options {
    JAVA_UNICODE_ESCAPE = true;
    STATIC = false;
}

PARSER_BEGIN(MiniJavaParser)
import java.io.*;
import java.util.Iterator;
import java.util.List;
import java.util.ArrayList;
import syntaxtree.*;
import visitor.BuildSymbolTableVisitor;
import visitor.TypeCheckVisitor;
import visitor.PrettyPrintVisitor;
import mips.MipsFrame;
import VisitorIR.BuildIRVisitor;
import Canon.Canon;
import Canon.BasicBlocks;
import Canon.TraceSchedule;
import Tree.PrintTree;
import Assem.*;

// Classe de entrada da expressão e retorno da saída
public class MiniJavaParser {
    public static void main(String []args) throws ParseException, IOException {
        // Recebe um nome de arquivo na entrada e direciona seu conteúdo ao parser
        MiniJavaParser parser = new MiniJavaParser(new FileInputStream(args[0]));
        Program p = parser.Program();

        // Constrói tabela de símbolos
        BuildSymbolTableVisitor buildSTVisitor = new BuildSymbolTableVisitor();
        buildSTVisitor.visit(p);

        // Realiza checagem de tipos com base na tabela de símbolos
        TypeCheckVisitor typeCheckVisitor = new TypeCheckVisitor(buildSTVisitor.getSymbolTable());
        typeCheckVisitor.visit(p);

        // Geração de código intermediário
        MipsFrame frame = new MipsFrame();
        BuildIRVisitor buildIRVisitor = new BuildIRVisitor(frame, buildSTVisitor.getSymbolTable());
        buildIRVisitor.visit(p);

        // Geração do código canônico
        FragAux.Frag next_frag = buildIRVisitor.frags.getNext();
        List<TraceSchedule> trace_list = new ArrayList<TraceSchedule>();
        //PrintTree printer = new PrintTree(System.out);

        while(next_frag.hasNext())
        {
            Tree.Stm body = ((FragAux.ProcFrag)next_frag).body;
            TraceSchedule trace_schedule = new TraceSchedule(new BasicBlocks(Canon.linearize(body)));
            trace_list.add(trace_schedule);

            Tree.StmList stml = trace_schedule.stms;

            while(stml != null)
            {
            //printer.prStm(stml.head);
            stml = stml.tail;
            }
            //System.out.println(); // Imprime uma linha vazia para separar os blocos
            
            next_frag = next_frag.getNext();
        }

        Tree.Stm body = ((FragAux.ProcFrag)next_frag).body;
        TraceSchedule trace_schedule = new TraceSchedule(new BasicBlocks(Canon.linearize(body)));
        trace_list.add(trace_schedule);

        Tree.StmList stml = trace_schedule.stms;

        while(stml != null)
        {
        //printer.prStm(stml.head);
        stml = stml.tail;
        }
        //System.out.println(); // Imprime uma linha vazia para separar os blocos
        
        // Seleção de instruções
        Iterator<TraceSchedule> itO = trace_list.iterator();
        InstrList instL = null;

        while (itO.hasNext()) {
            InstrList instrList = frame.codegen(itO.next().stms);
            for (InstrList i = instrList; i.tail != null; i = i.tail) {
                instL = new InstrList(i.head, instL);
            }
        }

        // Imprimir a lista de instruções
        /*InstrList aux = instL;
        while (aux != null) {
            System.out.print(aux.head.Assem);
            System.out.println("\n");
            aux = aux.tail;
        }*/

    }
}

PARSER_END(MiniJavaParser)

/* ---------------------------------------------------- 
Definição dos tokens - símbolos terminais da linguagem
-----------------------------------------------------*/

SKIP:
{
    " " | "\r" | "\t" | "\n"
}

SPECIAL_TOKEN: /* Comentários */
{
    < SINGLE_LINE_COMMENT: "//" (~["\n","\r"])* ("\n"|"\r"|"\r\n") >
    | <FORMAL_COMMENT: "/**" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/">
    | < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

TOKEN:
{
    < LPAREN: "(" >
    | < RPAREN: ")" >
    | < LSQPAREN: "[" >
    | < RSQPAREN: "]" >
    | < LBRACE: "{" >
    | < RBRACE: "}" >
    | < SEMICOLON: ";" >
    | < CLASS: "class" >
    | < PUBLIC: "public" >
    | < STATIC: "static" >
    | < VOID: "void" >
    | < MAIN: "main" >
    | < STRING: "String" >
    | < EXTENDS: "extends" >
    | < KOMMA: "," >
    | < RETURN: "return" >
    | < INTEGER: "int" >
    | < BOOLEAN: "boolean" >
    | < IF: "if" >
    | < ELSE: "else" >
    | < WHILE: "while" >
    | < PRINT: "System.out.println" >
    | < ASSIGN: "=" >
    | < LTHAN: "<" >
    | < AND: "&&" >
    | < PLUS: "+" >
    | < MINUS: "-" >
    | < TIMES: "*" >
    | < TRUE: "true" >
    | < FALSE: "false" >
    | < THIS: "this" >
    | < NEW: "new" >
    | < DOT: "." >
    | < NOT: "!" >
    | < LENGTH: "length" >
}

TOKEN: /* Número inteiro positivo */
{
    < INTEGER_LITERAL: (["0"-"9"])+ >
}

TOKEN: /* Identificador: uma letra, seguido de zero ou mais letras, dígitos ou _ */
{
    < ID: <LETTER> (<LETTER> | <DIGIT> | "_")* >
    | < #LETTER: ["a"-"z", "A"-"Z"] >
    | < #DIGIT:  ["0"-"9"] >
}

/*---------------------------------------------
Definição da gramática - Regras de Produção
---------------------------------------------*/

Program Program():
{
    MainClass m;
    ClassDeclList cl = new ClassDeclList();
}
{
    m = MainClass() cl = ClassDeclarationList() <EOF>

    { return new Program(m, cl); }
}

MainClass MainClass():
{
    Identifier name, args;
    Statement s;
}
{
    "class" name = Identifier() "{"
    "public" "static" "void" "main" "(" "String" "[" "]" args = Identifier() ")"
    "{" s = Statement() "}" "}"

    { return new MainClass(name, args, s); }
}

ClassDecl ClassDeclaration():
{
    Identifier name, nameSuper;
    VarDeclList vl;
    MethodDeclList ml;
}
{
    LOOKAHEAD(3) /* Decide se classe extende ou não */
    "class" name = Identifier()
    "{"
      vl = VarDeclarationList()
      ml = MethodDeclarationList()
    "}"
    { return new ClassDeclSimple(name, vl, ml); }
    |
    "class" name = Identifier() "extends" nameSuper = Identifier()
    "{"
      vl = VarDeclarationList()
      ml = MethodDeclarationList()
    "}"
    { return new ClassDeclExtends(name, nameSuper, vl, ml); }

    { return null; }
}

ClassDeclList ClassDeclarationList():
{
    ClassDecl c;
    ClassDeclList l = new ClassDeclList();
}
{
    (c = ClassDeclaration() { l.addElement(c); })*
    
    { return l; }
}

VarDecl VarDeclaration():
{
    Type t;
    Identifier name;
}
{
    t = Type() name = Identifier() ";"

    { return new VarDecl(t, name); }
}

VarDeclList VarDeclarationList():
{
    VarDecl v;
    VarDeclList vl = new VarDeclList();
}
{
    ( LOOKAHEAD(2) v = VarDeclaration() { vl.addElement(v); } )*

    { return vl; }
}

MethodDecl MethodDeclaration():
{
    Type returnType;
    Identifier name;
    FormalList params = new FormalList();
    VarDeclList vl = new VarDeclList();
    StatementList sl = new StatementList();
    Exp returnExp;
}
{
    "public" returnType = Type() name = Identifier() "(" params = ParamsList() ")" "{"
    vl = VarDeclarationList() sl = StatementList() "return" returnExp = Expression() ";" "}"

    { return new MethodDecl(returnType, name, params, vl, sl, returnExp); }
}

MethodDeclList MethodDeclarationList():
{
    MethodDeclList ml = new MethodDeclList();
    MethodDecl m;
}
{
  (m = MethodDeclaration() { ml.addElement(m); })*
  
  { return ml; }
}

FormalList ParamsList():
{
    FormalList fl = new FormalList();
    Formal f;
}
{
    [
        f = Param()
        { fl.addElement(f); }
        ( "," f = Param() { fl.addElement(f); } )*
    ]
    
    { return fl; }
}

Formal Param():
{
    Type t;
    Identifier name;
}
{
    t = Type() name = Identifier()

    { return new Formal(t, name); }
}

Type Type():
{
    Type t;
    Identifier id;
}
{
    LOOKAHEAD(2) /* Decide entre ArrayType (int []) e IntegerType (int) */
    t = ArrayType() { return t; }
    | t = BooleanType() { return t; }
    | t = IntegerType() { return t; }
    | id = Identifier() { return new IdentifierType(id.toString()); }

    { return null; }
}

Type ArrayType():
{}
{
    "int" "[" "]"

    { return new IntArrayType(); }
}

Type BooleanType():
{}
{
    "boolean"

    { return new BooleanType(); }
}

Type IntegerType():
{}
{
    "int"

    { return new IntegerType(); }
}

Statement Statement():
{
    Statement s;
}
{
    s = Block() { return s; }
    | s = IfStatement() { return s; }
    | s = WhileStatement() { return s; }
    | s = PrintStatement() { return s; }
    | LOOKAHEAD(2) s = AssignStatement() { return s; } /* Decide entre assinatura (id = exp) e assinatura de array (id[exp] = exp) */
    | LOOKAHEAD(2) s = ArrayAssignStatement() { return s; }

    { return null; }
}

StatementList StatementList():
{
    Statement s;
    StatementList sl = new StatementList();
}
{
    ( s = Statement() { sl.addElement(s); } )*
    { return sl; }
}

Statement Block():
{
    Statement s;
    StatementList sl = new StatementList();
}
{
    "{" (s = Statement() { sl.addElement(s); } )* "}"

    { return new Block(sl); }
}

Statement IfStatement():
{
    Exp e;
    Statement s1, s2;
}
{
    "if" "(" e = Expression() ")" s1 = Statement() "else" s2 = Statement()

    { return new If(e, s1, s2); }
}

Statement WhileStatement():
{
    Exp e;
    Statement s;
}
{
    "while" "(" e = Expression() ")" s = Statement()

    { return new While(e, s); }
}

Statement PrintStatement():
{
    Exp e;
}
{
    "System.out.println" "(" e = Expression() ")" ";"

    { return new Print(e); }
}

Statement AssignStatement():
{
    Identifier id;
    Exp e;
}
{
    id = Identifier() "=" e = Expression() ";"

    { return new Assign(id, e); }
}

Statement ArrayAssignStatement():
{
    Identifier id;
    Exp e1, e2;
}
{
    id = Identifier() "[" e1 = Expression() "]" "=" e2 = Expression() ";"

    { return new ArrayAssign(id, e1, e2); }
}

/* PRECEDÊNCIA DE OPERADORES */
Exp Expression():
{
    Exp e;
}
{
    e = AndExpression()
    
    { return e; }
}

Exp AndExpression():
{
    Exp x, y;
}
{
    x = CompareExpression()
    (
     LOOKAHEAD(2) "&&" y = CompareExpression()
     { x = new And(x, y); }
    )*

    { return x; }
}

Exp CompareExpression():
{
    Exp x, y;
}
{
    x = PlusExpression()
    (
     LOOKAHEAD(2) "<" y = PlusExpression()
     { x = new LessThan(x, y); }
    )?

    { return x; }
}

Exp PlusExpression():
{
    Exp x, y;
}
{
    x = TimesExpression()
    (
     "+" y = TimesExpression() { x = new Plus(x, y); }
     |
     "-" y = TimesExpression() { x = new Minus(x, y); }
    )*

    { return x; }
}

Exp TimesExpression():
{
    Exp x, y;
}
{
    x = PrefixExpression()
    (
        LOOKAHEAD(2) "*" y = PrefixExpression()
        { x = new Times(x, y); }
    )*

    { return x; }
}

Exp PrefixExpression():
{
    Exp e;
    int c = 0;
}
{
    ("!" { ++c; })*
    e = PostfixExpression()
    { for (int i=0; i<c; ++i) e = new Not(e); }

    { return e; }
}

Exp PostfixExpression():
{
    Exp e, pr;
    Identifier id;
    ExpList el = new ExpList();
}
{
    pr = PrimaryExpression()
    (
     "[" e = Expression() "]" { return new ArrayLookup(pr, e); }
      | LOOKAHEAD(2) "." id = Identifier() "(" (ExpressionList(el))? ")"
        { return new Call(pr, id, el); }
      | LOOKAHEAD(2) "." "length"
        { return new ArrayLength(pr); }
    )*

    { return pr; }
}

Identifier Identifier():
{ Token t; }
{
    t = <ID> { return new Identifier(t.image); }
}

Exp PrimaryExpression():
{
    Exp e;
    Identifier id;
}
{
    e = IntegerLiteral() { return e; }
    | "true" { return new True(); }
    | "false" { return new False(); }
    | id = Identifier() { return new IdentifierExp(id.toString()); }
    | "this" { return new This(); }
    | LOOKAHEAD(2) "new" "int" "[" e = Expression() "]"
      { return new NewArray(e); }
    | "new" id = Identifier() "(" ")"
      { return new NewObject(id); }
    | "(" e = Expression() ")"
      { return e; }

    { return null; }
}

Exp IntegerLiteral():
{
    Token t;
    int num;
}
{
    t = <INTEGER_LITERAL>
    {
        num = Integer.valueOf(t.image);
        return new IntegerLiteral(num);
    }
}

void ExpressionList(ExpList el):
{
    Exp e;
}
{
    e = Expression() { el.addElement(e); }
    (
        "," e = Expression()
        { el.addElement(e); }
    )*
}

//void NotExpression():
//{
//    Exp e;
//}
//{
//   (LOOKAHEAD(2) "!")+ PostfixExpression()
//}
